import asyncio
import logging
import time

from aiogram import types, Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError

from keyboards.admin.admin import (
    main_menu,
    back_to_menu,
    mandatory_subs_list,
    delete_sub,
    current_views_list,
    view_options,
    refresh_notifications_status,
    refs_menu,
    where_to_send_notifications_menu,
    cancel_action,
    generate_or_cancel_ref
)
from keyboards.user_menu import user_menu
from utils.admin import send_formatted_message, gen_random_ref
from states.admin import Notifs
from database import crud
from database.models import Users, Groups, Tests
from database.models import Subs, Referals, Views

notification_status = {'users_all_count': 0, 'users_count': 0, 'all_users': 0, 'chats_all_count': 0, 'chats_count': 0,
                       'all_chats': 0, "notification_type": ""}
new_sub = {"channel_id": None, "url": None, "channel_name": None}


router = Router()
router.message.filter(F.chat.type == 'private')


@router.message(Command('admin'))
async def admin_menu(m: types.Message):
    users_count = await Users.all().count()
    pass_count = await crud.get_overall_pass_counter()
    tests_count = await Tests.all().count()
    groups = await Groups.all().count()

    await m.answer(
        f"–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: {users_count}\n"
        f"–í—Å–µ–≥–æ –≥—Ä—É–ø–ø: {groups}\n"
        f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤ –≤ –±–æ—Ç–µ: {tests_count}\n"
        f"–í—Å–µ–≥–æ –ø—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤ (—Ä–∞–∑): {pass_count}",
        reply_markup=main_menu()
    )


@router.callback_query(F.data.startswith('admin'))
async def admin_menu_from_callback(call: types.CallbackQuery):
    users_count = await Users.all().count()
    pass_count = await crud.get_overall_pass_counter()
    tests_count = await Tests.all().count()

    await call.message.answer(
        f"–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: {users_count}\n"
        f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤ –≤ –±–æ—Ç–µ: {tests_count}\n"
        f"–í—Å–µ–≥–æ –ø—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤ (—Ä–∞–∑): {pass_count}",
        reply_markup=main_menu()
    )


@router.callback_query(F.data == 'cancel_admin')
async def exit_panel(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    try:
        await call.message.delete()
    except:
        pass

    await call.message.answer('üíº <b>–ú–µ–Ω—é –±–æ—Ç–∞:</b>', reply_markup=user_menu())


@router.callback_query(F.data.startswith('stats'))
async def stats(call: types.CallbackQuery):
    msg = await call.message.edit_text("–°–æ–±–∏—Ä–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, —ç—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")
    day_time = int(time.time()) - 86400
    week_time = int(time.time()) - 604800

    daily_regs = await Users.filter(reg_time__gte=day_time).only('id').count()
    weekly_regs = await Users.filter(reg_time__gte=week_time).only("id").count()
    all_users = await Users.filter().only("id").count()

    active_users_daily = await Users.filter(reg_time__lt=day_time, last_active__gt=day_time).only("id").count()

    subbed_users_count = 0
    for user in await Users.filter(subbed=1).only("subbed_count"):
        subbed_users_count += user.subbed_count

    subbed_users_count_daily = 0
    for user in await Users.filter(subbed=1, reg_time__gte=day_time).only("subbed_count"):
        subbed_users_count_daily += user.subbed_count

    subbed_users_count_weekly = 0
    for user in await Users.filter(subbed=1, reg_time__gte=week_time).only("subbed_count"):
        subbed_users_count_weekly += user.subbed_count

    norefs_users = await Users.filter(ref=None).only("id").count()
    norefs_percentage = (norefs_users / all_users) * 100 if norefs_users > 0 else 0
    norefs_users_daily = await Users.filter(ref=None, reg_time__gte=day_time).only("id").count()
    norefs_percentage_daily = (norefs_users_daily / daily_regs) * 100 if norefs_users_daily > 0 else 0
    norefs_users_weekly = await Users.filter(ref=None, reg_time__gte=week_time).only("id").count()
    norefs_percentage_weekly = (norefs_users_weekly / weekly_regs) * 100 if norefs_users_weekly > 0 else 0

    groups = await Groups.all().count()

    text = f"""
üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:

<code>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {all_users}
–°–∞–º–æ—Ä–æ—Å—Ç: {norefs_users} ({int(round(norefs_percentage, 0))}%)

–í—Å–µ–≥–æ –≥—Ä—É–ø–ø: {groups} üë•

–°—É—Ç–æ—á–Ω—ã–π –æ–Ω–ª–∞–π–Ω: {active_users_daily}
–í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –ø–æ –û–ü: {subbed_users_count}

<b>–ó–∞ –Ω–µ–¥–µ–ª—é:</b>
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {weekly_regs}
–°–∞–º–æ—Ä–æ—Å—Ç: {norefs_users_weekly} ({int(round(norefs_percentage_weekly, 0))}%)
–ü–æ–¥–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –ø–æ –û–ü: {subbed_users_count_weekly}

<b>–ó–∞ –¥–µ–Ω—å:</b>
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {daily_regs}
–°–∞–º–æ—Ä–æ—Å—Ç: {norefs_users_daily} ({int(round(norefs_percentage_daily, 0))}%)
–ü–æ–¥–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –ø–æ –û–ü: {subbed_users_count_daily}
</code>
"""

    await msg.edit_text(text, reply_markup=back_to_menu(), parse_mode='html')


@router.callback_query(F.data.startswith('subs'))
async def subs(call: types.CallbackQuery):
    all_subs = await Subs.filter()

    text = "\n–¢–µ–∫—É—â–∏–µ –û–ü:"

    if all_subs:
        for num, sub in enumerate(all_subs, start=1):
            text += f'\n<a href="{sub.url}">{num}. {sub.channel_name}</a> - {sub.subbed} –ø–¥–ø'
    else:
        text += "\n–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."

    await call.message.edit_text(
        text,
        reply_markup=mandatory_subs_list(all_subs),
        parse_mode='html',
        disable_web_page_preview=True
    )


@router.callback_query(F.data.startswith('createSubBot'))
async def create_sub_bot(call: types.CallbackQuery, state: FSMContext):
    await state.set_state(Notifs.sub_get_bot_url)

    await call.message.answer(
        '–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞.\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞".'
    )


@router.message(Notifs.sub_get_bot_url)
async def receive_sub_bot_url(message: types.Message, state: FSMContext):
    if message.text and message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
        return await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –û–ü –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    await state.update_data(url=message.text)
    await state.set_state(Notifs.sub_get_bot_token)
    await message.answer(
        '–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞.\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞".'
    )


@router.message(Notifs.sub_get_bot_token)
async def receive_sub_bot_token(message: types.Message, state: FSMContext):
    if message.text and message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
        return await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –û–ü –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    data = await state.get_data()

    if message.text != '0':
        try:
            msbot = Bot(message.text)
        except:
            return await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω.')

        try:
            msbot_name = (await msbot.me()).first_name
        except:
            msbot_name = data['url']
    else:
        msbot_name = data['url']

    await Subs.create(
        url=data['url'],
        channel_id=0,
        token=message.text,
        type='bot',
        channel_name=msbot_name
    )

    await message.answer(
        '–°—Å—ã–ª–∫–∞ –Ω–∞ –û–ü —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.'
    )


@router.callback_query(F.data.startswith('createSub'))
async def create_sub(call: types.CallbackQuery, state: FSMContext):
    await state.set_state(Notifs.create_sub)

    await call.message.edit_text(
        "–ü—Ä–∏—à–ª–∏—Ç–µ –ø–æ—Å—Ç —Å –Ω—É–∂–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞. –í–Ω–∏–º–∞–Ω–∏–µ, –±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞!\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã - ''–æ—Ç–º–µ–Ω–∞''",
    )


@router.message(Notifs.create_sub)
async def first_step_creation_sub(m: types.Message, state: FSMContext, bot: Bot):
    await state.clear()

    if m.text and m.text.lower() == '–æ—Ç–º–µ–Ω–∞':
        return await m.answer("–°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –û–ü –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    if m.forward_from_chat:
        new_sub['channel_id'] = m.forward_from_chat.id
        new_sub['channel_name'] = m.forward_from_chat.full_name

    try:
        member = await bot.get_chat_member(
            m.forward_from_chat.id, (await bot.me()).id
        )
    except (TelegramBadRequest, TelegramForbiddenError):
        return await m.answer('–ë–æ—Ç –Ω–µ –∞–¥–º–∏–Ω –≤ –¥–∞–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–π –ø–æ—Å—Ç.')

    if member.status in {'left', 'kicked'}:
        return await m.answer('–ë–æ—Ç –Ω–µ –∞–¥–º–∏–Ω –≤ –¥–∞–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–π –ø–æ—Å—Ç.')

    await m.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª.")
    await state.set_state(Notifs.create_sub2)


@router.message(Notifs.create_sub2, F.text)
async def second_step_creation_sub(m: types.Message, state: FSMContext):
    await state.clear()

    new_sub['url'] = m.text
    channel_id = 0 if new_sub['channel_id'] is None else new_sub['channel_id']
    await Subs.create(
        url=new_sub['url'],
        channel_id=channel_id,
        channel_name=new_sub['channel_name']
    )
    await m.answer("–°—Å—ã–ª–∫–∞ –Ω–∞ –û–ü –¥–æ–±–∞–≤–ª–µ–Ω–∞.")


@router.callback_query(F.data.startswith('manageSub_'))
async def manage_subs(call: types.CallbackQuery):
    sub = await Subs.filter(id=int(call.data.split("_")[1]))
    reply_markup = None

    if sub:
        sub = sub[0]
        text = (
            f"–û–ü <b>{sub.channel_name}</b> ({sub.id})\n"
            f"Channel ID: {sub.channel_id}\n"
            f"–°—Å—ã–ª–∫–∞: {sub.url}\n"
            f"–ü–æ–¥–ø–∏—Å–∞–ª–æ—Å—å: {sub.subbed}"
        )
        reply_markup = delete_sub(sub.id)
    else:
        text = "–û–ü –Ω–µ –Ω–∞–π–¥–µ–Ω"
    await call.message.edit_text(text, reply_markup=reply_markup)


@router.callback_query(F.data.startswith('deleteSub_'))
async def sub_delete(call: types.CallbackQuery):
    sub = await Subs.filter(id=int(call.data.split("_")[1]))
    if sub:
        sub = sub[0]

        await sub.delete()
        await call.message.answer("–û–ü —É–¥–∞–ª—ë–Ω")
    else:
        await call.message.answer("–û–ü —É–∂–µ —É–¥–∞–ª—ë–Ω")


@router.callback_query(F.data == 'csv')
async def to_csv(call: types.CallbackQuery):
    await call.message.edit_text("–ù–∞—á–∏–Ω–∞—é –≤—ã–≥—Ä—É–∑–∫—É –≤ csv, —ç—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")

    all_users = await Users.filter(valid=1).values_list("id", flat=True)
    all_groups = await Groups.filter(is_active=1).values_list("id", flat=True)

    with open('users.csv', 'w') as f:
        f.write('\n'.join([str(chat_id) for chat_id in all_users + all_groups]))

    await call.message.answer_document(types.FSInputFile('users.csv'))

    await call.message.answer(
        "–í—ã–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–í —Ñ–∞–π–ª–µ:\n–Æ–∑–µ—Ä–æ–≤: {}\n–ß–∞—Ç–æ–≤: {}".format(len(all_users), len(all_groups)),
        reply_markup=back_to_menu()
    )


@router.callback_query(F.data == 'CSV')
async def to_csv_all(call: types.CallbackQuery):
    await call.message.edit_text("–ù–∞—á–∏–Ω–∞—é –≤—ã–≥—Ä—É–∑–∫—É –≤ csv, —ç—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")

    all_users = await Users.all().values_list("id", flat=True)
    all_groups = await Groups.all().values_list("id", flat=True)

    with open('users.txt', 'w') as f:
        f.write('\n'.join([str(chat_id) for chat_id in all_users + all_groups]))

    await call.message.answer_document(types.FSInputFile('users.txt'))

    await call.message.answer(
        "–í—ã–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–í —Ñ–∞–π–ª–µ:\n–Æ–∑–µ—Ä–æ–≤: {}\n–ß–∞—Ç–æ–≤: {}".format(len(all_users), len(all_groups)),
        reply_markup=back_to_menu()
    )


@router.callback_query(F.data == 'updateCsv')
async def update_csv(call: types.CallbackQuery, bot: Bot):
    await call.message.edit_text("–û–±–Ω–æ–≤–ª—è—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤–∞–ª–∏–¥—É, —ç—Ç–æ –∑–∞–π–º—ë—Ç –≤—Ä–µ–º—è...\n–ù–∞—á–∏–Ω–∞—é —Å —á–∞—Ç–æ–≤...\n")

    chats_count = 0
    users_count = 0
    user_to_dict = ""

    allUsers = await Users.filter(valid=1).only("id")
    for user in allUsers:
        try:
            await bot.send_chat_action(user.id, "typing")
            user_to_dict += f"{user.id}\n"
            users_count += 1
            await asyncio.sleep(.15)
        except:
            await Users.filter(id=user.id).update(valid=0)
    with open('users.csv', 'w') as f:
        f.write(user_to_dict)
    await bot.send_document(call.message.chat.id, types.FSInputFile('users.csv'))

    await bot.send_message(
        call.message.chat.id,
        "–í—ã–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø—Ä–∏—Å—ã–ª–∞—é —Ñ–∞–π–ª. –í —Ñ–∞–π–ª–µ:\n–Æ–∑–µ—Ä–æ–≤: {}\n–ß–∞—Ç–æ–≤: {}".format(users_count, chats_count),
        reply_markup=back_to_menu()
    )


@router.callback_query(F.data == 'deleteInactive')
async def delete_inactive(call: types.CallbackQuery, bot: Bot):
    msg = await bot.edit_message_text(
        "–ù–∞—á–∏–Ω–∞—é —É–¥–∞–ª–µ–Ω–∏–µ, —ç—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...", call.message.chat.id,
        call.message.message_id
    )

    all_count = 0
    deleted = 0
    valid = 0
    for user in await Users.filter().only("id"):
        if all_count / 500 == all_count // 500:
            try:
                await bot.edit_message_text(
                    "–£–¥–∞–ª–µ–Ω–∏–µ –∏–Ω–∞–∫—Ç–∏–≤–∞:\n–ü—Ä–æ–π–¥–µ–Ω–æ: {}\n–£–¥–∞–ª–µ–Ω–æ: {}\n–í–∞–ª–∏–¥: {}".format(all_count, deleted, valid),
                    msg.chat.id, msg.message_id)
            except:
                pass
        all_count += 1
        try:
            await bot.send_chat_action(user.id, 'typing')
            valid += 1
            await asyncio.sleep(.3)
        except:
            deleted += 1
            await Users.filter(id=user.id).delete()

    await call.message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í—Å–µ–≥–æ —é–∑–µ—Ä–æ–≤: {}\n–£–¥–∞–ª–µ–Ω–æ: {}\n–í–∞–ª–∏–¥: {}".format(
        all_count, deleted, valid
    ))


@router.callback_query(F.data.startswith('views'))
async def views(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    all_views = await Views.filter()
    text = "\n–¢–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑—ã:"

    if all_views:
        for view in all_views:
            if view.status == 1:
                status = "–õ–°"
            elif view.status == 2:
                status = "–í —á–∞—Ç–∞—Ö"
            elif view.status == 4:
                status = "–í —á–∞—Ç–∞—Ö (–æ–±–Ω–æ–≤–∞)"
            else:
                status = "–ó–∞–∫–æ–Ω—á–∏–ª—Å—è"
            text += f"\n{view.name} ({status}) - {view.viewed}/{view.max_viewed}"
    else:
        text += "\n–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."

    await call.message.edit_text(
        text,
        reply_markup=current_views_list(all_views),
        disable_web_page_preview=True
    )


views_names = ""


@router.callback_query(F.data == 'CreateView')
async def create_view(call: types.CallbackQuery, state: FSMContext):
    await state.set_state(Notifs.create_view)
    await call.message.edit_text("–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∫–∞–∑–∞.", reply_markup=cancel_action('views'))


@router.message(Notifs.create_view)
async def first_step_creation(m: types.Message, state: FSMContext):
    await state.clear()
    if m.text and m.text.lower() == '–æ—Ç–º–µ–Ω–∞':
        return await m.answer("–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")

    global views_names
    views_names = m.text
    await state.set_state(Notifs.create_view2)
    await m.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞", reply_markup=cancel_action('views'))


@router.message(Notifs.create_view2)
async def second_step_creation(m: types.Message, state: FSMContext):
    await state.clear()
    if m.text and m.text.lower() == '–æ—Ç–º–µ–Ω–∞':
        return await m.answer("–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")

    global views_names
    watched_users = [0]
    if m.reply_markup:
        await Views.create(name=views_names, from_user=m.from_user.id, message_id=m.message_id,
                           watched_users=watched_users, markup=m.reply_markup.model_dump(), msg=m.html_text)
    else:
        await Views.create(name=views_names, from_user=m.from_user.id, message_id=m.message_id,
                           watched_users=watched_users, msg=m.html_text)
    await m.answer(
        "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫–∞–∑–æ–≤.",
        reply_markup=cancel_action('views')
    )
    await state.set_state(Notifs.create_view3)


@router.message(Notifs.create_view3, F.text)
async def third_step_creation(m: types.Message, state: FSMContext):
    await state.clear()
    if m.text and m.text.lower() == '–æ—Ç–º–µ–Ω–∞':
        return await m.answer("–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")

    global views_names
    view = (await Views.filter(name=views_names))[0]
    await Views.filter(name=views_names).update(max_viewed=int(m.text), status=1)

    await m.answer("–ü–æ–∫–∞–∑ –∑–∞–ø—É—â–µ–Ω!")


# @dp.callback_query_handler(lambda call: call.data.startswith("createView_"))
# async def createView_(call):
#     if call.data.split("_")[2] == "1":
#         await Views.filter(id=call.data.split("_")[1]).update(status=1)
#     elif call.data.split("_")[2] == "3":
#         await Views.filter(id=call.data.split("_")[1]).update(status=3)
#     await call.message.edit_text("–ü–æ–∫–∞–∑ –∑–∞–ø—É—â–µ–Ω.")


@router.callback_query(F.data.startswith('manageView_'))
async def manage_views(call: types.CallbackQuery):
    view = await Views.filter(id=int(call.data.split("_")[1]))

    if view:
        view = view[0]
        text = f"–ü–æ–∫–∞–∑ {view.name}\nID: {view.id}\n–ü–æ–∫–∞–∑–∞–Ω–æ: {view.viewed}\n–í—Å–µ–≥–æ –ø–æ–∫–∞–∑–æ–≤: {view.max_viewed}"
        markup = view_options(view.id)
    else:
        text = "–ü–æ–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        markup = back_to_menu()

    await call.message.edit_text(text, reply_markup=markup, disable_web_page_preview=True)


@router.callback_query(F.data.startswith('deleteView_'))
async def view_delete(call: types.CallbackQuery):
    view = await Views.filter(id=int(call.data.split("_")[1]))
    if view:
        view = view[0]

        await view.delete()
        await call.message.answer("–ü–æ–∫–∞–∑ —É–¥–∞–ª—ë–Ω")
    else:
        await call.message.answer("–ü–æ–∫–∞–∑ —É–∂–µ —É–¥–∞–ª—ë–Ω")


@router.callback_query(F.data.startswith('watchView_'))
async def view_watch(call: types.CallbackQuery):
    view = await Views.filter(id=int(call.data.split("_")[1]))
    if view:
        view = view[0]

        if view.markup:
            await call.message.answer(view.msg, reply_markup=view.markup, parse_mode='html')
            # await bot.copy_message(call.message.chat.id, view.from_user, view.message_id, reply_markup=view.markup)
        else:
            await call.message.answer(view.msg, parse_mode='html')
    else:
        await call.message.answer("–ü–æ–∫–∞–∑ —É–¥–∞–ª—ë–Ω.")


@router.callback_query(F.data.startswith('notifications'))
async def notifications(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.edit_text("–ö—É–¥–∞ —à–ª—ë–º?", reply_markup=where_to_send_notifications_menu())


@router.callback_query(F.data.startswith('chats_notifications'))
async def chats_notifications(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_text(
        "–°–æ–∑–¥–∞—ë—Ç—Å—è –Ω–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º. –ü—Ä–∏—à–ª–∏—Ç–µ –ø–æ—Å—Ç.",
        reply_markup=cancel_action('notifications')
    )
    await state.set_state(Notifs.first_step)
    notification_status["notification_type"] = "chats"


@router.callback_query(F.data.startswith('users_notifications'))
async def chats_notifications(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_text(
        "–°–æ–∑–¥–∞—ë—Ç—Å—è –Ω–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. –ü—Ä–∏—à–ª–∏—Ç–µ –ø–æ—Å—Ç.",
        reply_markup=cancel_action('notifications')
    )
    await state.set_state(Notifs.first_step)
    notification_status["notification_type"] = "users"


@router.callback_query(F.data.startswith('all_notifications'))
async def chats_notifications(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_text(
        "–°–æ–∑–¥–∞—ë—Ç—Å—è –Ω–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. –ü—Ä–∏—à–ª–∏—Ç–µ –ø–æ—Å—Ç.",
        reply_markup=cancel_action('notifications')
    )
    await state.set_state(Notifs.first_step)
    notification_status["notification_type"] = "all"


@router.message(Notifs.first_step)
async def first_step_notify(m: types.Message, state: FSMContext, bot: Bot):
    await state.clear()
    if m.text and m.text.lower() == '–æ—Ç–º–µ–Ω–∞':
        return await m.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu())

    notification_status['users_all_count'] = 0
    notification_status['users_count'] = 0
    notification_status['all_users'] = 0
    notification_status['chats_all_count'] = 0
    notification_status['chats_count'] = 0
    notification_status['all_chats'] = 0
    all_users = await Users.all().only('id').count()
    notification_status['all_users'] = all_users

    await m.answer("–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ—à–ª–∞.", reply_markup=refresh_notifications_status())

    if notification_status["notification_type"] in ["all", "users"]:
        for user in await Users.all().only("id", "first_name", "username"):

            try:
                await send_formatted_message(user.id, m, user.first_name, user.username, bot)
                notification_status['users_count'] += 1
            except Exception as e:
                logging.error(e, exc_info=True)
            finally:
                await asyncio.sleep(.04)

            notification_status['users_all_count'] += 1
    all_chats = await Groups.all().only('id').count()
    notification_status['all_chats'] = all_chats

    if notification_status["notification_type"] in ["all", "chats"]:
        for group in await Groups.all().only("id"):
            try:
                await bot.copy_message(group.id, m.chat.id, m.message_id, reply_markup=m.reply_markup)
                notification_status['chats_count'] += 1
                await asyncio.sleep(.07)
            except:
                pass
            notification_status['chats_all_count'] += 1
    text = f"""
    –í—Å–µ–≥–æ —é–∑–µ—Ä–æ–≤ –≤ –±–∞–∑–µ: {notification_status['all_users']}
    –ü—Ä–æ–π–¥–µ–Ω–æ —é–∑–µ—Ä–æ–≤: {notification_status['users_all_count']}
    –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {notification_status['users_count']}
    –í—Å–µ–≥–æ —á–∞—Ç–æ–≤ –≤ –±–∞–∑–µ: {notification_status['all_chats']}
    –ü—Ä–æ–π–¥–µ–Ω–æ —á–∞—Ç–æ–≤: {notification_status['chats_all_count']}
    –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {notification_status['chats_count']}
    """

    await m.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. {}".format(text))


@router.callback_query(F.data == 'refreshNotify')
async def refresh_notify(call: types.CallbackQuery):
    text = f"""
–ò–¥—ë—Ç —Ä–∞—Å—Å—ã–ª–∫–∞ ({notification_status["notification_type"]}).
–í—Å–µ–≥–æ —é–∑–µ—Ä–æ–≤ –≤ –±–∞–∑–µ: {notification_status['all_users']}
–ü—Ä–æ–π–¥–µ–Ω–æ —é–∑–µ—Ä–æ–≤: {notification_status['users_all_count']}
–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {notification_status['users_count']}

–í—Å–µ–≥–æ —á–∞—Ç–æ–≤ –≤ –±–∞–∑–µ: {notification_status['all_chats']}
–ü—Ä–æ–π–¥–µ–Ω–æ —á–∞—Ç–æ–≤: {notification_status['chats_all_count']}
–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {notification_status['chats_count']}
"""
    await call.message.edit_text(text, reply_markup=refresh_notifications_status())


@router.callback_query(F.data == 'refs')
async def refs(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.edit_text("–ü–æ–¥–æ–∂–¥–∏—Ç–µ...")
    await asyncio.sleep(.3)

    all_refs = await Referals.filter()
    text = "–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ä–µ—Ñ–∫–æ–¥—ã:\n"

    for ref in all_refs:
        try:
            price_all = ref.price / ref.clicked
        except:
            price_all = ref.price
        text += "\n/ref_{} - {}üë• ({}p.)".format(ref.name, ref.clicked, round(price_all, 2))

    await call.message.answer(text, reply_markup=refs_menu())


@router.message(F.text.startswith('/ref_'))
async def ref_look(m: types.Message, bot: Bot):
    result = m.text.replace('/ref_', '', 1)
    refcode = (await Referals.filter(name=result))[0]

    day_time = int(time.time()) - 86400
    week_time = int(time.time()) - 604800

    subbed_users_count = 0
    subbed_alltime = await Users.filter(subbed=1, ref=refcode.name).only("subbed_count")
    for user in subbed_alltime:
        subbed_users_count += user.subbed_count

    subbed_users_count_daily = 0
    subbed_daily = await Users.filter(subbed=1, reg_time__gte=day_time, ref=refcode.name).only("subbed_count")
    for user in subbed_daily:
        subbed_users_count_daily += user.subbed_count

    subbed_users_count_weekly = 0
    subbed_weekly = await Users.filter(subbed=1, reg_time__gte=week_time, ref=refcode.name).only("subbed_count")
    for user in subbed_weekly:
        subbed_users_count_weekly += user.subbed_count

    daily_regs = await Users.filter(reg_time__gte=day_time, ref=refcode.name).count()
    weekly_regs = await Users.filter(reg_time__gte=week_time, ref=refcode.name).count()
    all_users = await Users.filter(ref=refcode.name).count()

    active_users_daily = await Users.filter(
        ref=refcode.name,
        reg_time__lt=day_time,
        last_active__gt=day_time).only("id").count()

    try:
        price_unique = refcode.price / refcode.count
    except:
        price_unique = refcode.price
    try:
        price_all = refcode.price / refcode.clicked
    except:
        price_all = refcode.price

    price_for_all = refcode.price / all_users if all_users > 0 else refcode.price

    non_unique = refcode.clicked - refcode.count
    non_unique_percentage = (non_unique / refcode.clicked) * 100 if non_unique > 0 else 0

    bot_name = (await bot.me()).username

    if all_users != 0:
        alltime_percentage = round(len(subbed_alltime) / all_users * 100, 1)
    else:
        alltime_percentage = 0

    if weekly_regs != 0:
        weekly_percentage = round(len(subbed_weekly) / weekly_regs * 100, 1)
    else:
        weekly_percentage = 0

    if daily_regs != 0:
        daily_percentage = round(len(subbed_daily) / daily_regs * 100, 1)
    else:
        daily_percentage = 0

    text = f"""
üìä<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
<code>
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {all_users}
–í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –ø–æ –û–ü: {len(subbed_alltime)} ({alltime_percentage}%)
–°—É—Ç–æ—á–Ω—ã–π –æ–Ω–ª–∞–π–Ω: {active_users_daily} 

–ó–∞ –Ω–µ–¥–µ–ª—é:
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {weekly_regs}
–ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –ø–æ –û–ü: {len(subbed_weekly)} ({weekly_percentage}%)

–ó–∞ –¥–µ–Ω—å:
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {daily_regs}
–ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –ø–æ –û–ü: {len(subbed_daily)} ({daily_percentage}%)
</code>

–¶–µ–Ω–∞: {refcode.price}—Ä.
–ü–µ—Ä–µ—Ö–æ–¥—ã: {refcode.clicked} ({round(price_all, 2)}p.)
–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: {refcode.count} ({round(price_unique, 2)}p.)

https://t.me/{bot_name}?start={refcode.name}
"""

    await m.answer(text, reply_markup=back_to_menu(), parse_mode='html', disable_web_page_preview=True)


@router.callback_query(F.data == 'delrefs')
async def del_refs(call: types.CallbackQuery):
    all_refs = await Referals.filter()
    text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ñ–∫–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n"

    for ref in all_refs:
        try:
            price_all = ref.price / ref.clicked
        except:
            price_all = ref.price
        text += "\n/delref_{} - {}üë• ({}p.)".format(ref.name, ref.clicked, round(price_all, 2))

    await call.message.answer(text, reply_markup=cancel_action('refs'))


@router.message(F.text.startswith('/delref_'))
async def del_ref(m: types.Message):
    result = m.text.replace('/delref_', '', 1)
    refcode = (await Referals.filter(name=result))[0]
    await refcode.delete()
    await m.answer("–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ —É–¥–∞–ª—ë–Ω.", reply_markup=back_to_menu(with_cancel=False))


@router.callback_query(F.data == 'createref')
async def create_ref(call: types.CallbackQuery, state: FSMContext):
    await state.set_state(Notifs.createref)
    await call.message.edit_text(
        '–û—Ç–ø—Ä–∞–≤—å —Ü–µ–Ω—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏.',
        reply_markup=cancel_action('refs')
    )


@router.message(Notifs.createref, F.text)
async def create_refcode(m: types.Message, state: FSMContext):

    price = int(m.text)
    await state.update_data(ref_price=price)

    await state.set_state(Notifs.createref2)
    await m.answer(
        "<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è.</i>",
        reply_markup=generate_or_cancel_ref()
    )


@router.callback_query(Notifs.createref2, F.data == 'gen_ref')
async def gen_refcode(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    await state.clear()
    ref = gen_random_ref()

    await Referals.create(name=ref, price=data['ref_price'])
    bot_name = (await bot.me()).username
    await call.message.edit_text(
        f"<b>–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n\n"
        f"–î–ª—è –õ–°: https://t.me/{bot_name}?start={ref}\n"
        f"–î–ª—è –≥—Ä—É–ø–ø: https://t.me/{bot_name}?startgroup={ref}",
        reply_markup=back_to_menu(with_cancel=False)
    )


@router.message(Notifs.createref2, F.text)
async def create_refcode2(m: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    await state.clear()

    await Referals.create(name=m.text, price=data['ref_price'])
    bot_name = (await bot.me()).username
    await m.answer(
        f"<b>–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n\n"
        f"–î–ª—è –õ–°: https://t.me/{bot_name}?start={m.text}\n"
        f"–î–ª—è –≥—Ä—É–ø–ø: https://t.me/{bot_name}?startgroup={m.text}",
        reply_markup=back_to_menu(with_cancel=False)
    )
